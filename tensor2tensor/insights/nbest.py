# coding=utf-8
# Copyright 2018 The Tensor2Tensor Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Graph representation for building NBest visualizations."""


class Sentence(object):
  """Sentence stores complete sentences generated by the model.

  The Sentence class supports serialization to a JSON data format expected by the
  client side representation.  When serializing, it generates the following
  fields:
    in_edge_index: The list of directed edge indices into the Vertex.
    out_edge_index: The list of directed edge indices from the Vertex.
  """

  def __init__(self, idx):
    """Initialize the Sentence.

    Args:
      idx: The index of the sentence.
    """
    self.idx = idx
    self.rank = 0
    self.tokens = []

  def add_tokens(self, token_list):
    """Add tokens to the Sentence.

    Args:
      token_list: list of the token words in the sentence
    """
    index = 0
    for token in token_list:
        t = Token(index, token)
        self.tokens.append(t)
        index+=1


  def to_dict(self):
    """Returns a simplified dictionary representing the Sentence.

    Returns:
      A dictionary that can easily be serialized to JSON.
    """
    return {
        "tokens": [t.to_dict() for t in self.tokens],
        "rank": self.rank,
    }


class Token(object):
  """Token stores details about token in a sentence.

  The Token class supports serialization to a JSON data format expected by the
  client side representation.  When serializing, it generates the following
  fields:
    source_index: The source Vertex index for this Edge.
    target_index: The target Vertex index for this Edge.
    data: Arbitrary data for this Edge.
  """

  def __init__(self, idx, text):
    """Initialize the Token.

    Args:
      idx: The index of the Edge.
    """
    self.idx = idx
    self.text = text
    self.score = -1

  def to_dict(self):
    """Returns a simplified dictionary representing the Token.

    Returns:
      A dictionary that can easily be serialized to JSON.
    """
    return {
        "text": self.text,
        "score": self.score,
    }

  def __str__(self):
    return str(self.to_dict())


class NBest(object):
  """A NBest data structure that can easily be JSON serialized for visualization.

  When serializing, it generates the following fields:
    edge: The list of all serialized Edge instances.
    node: The list of all serialized Vertex instances.
  """

  def __init__(self):
    self.sentences = []
    self.sentence_map = {}

  def new_sentence(self, tokens):
    """Creates and returns a new vertex.

    Returns:
      A new Sentence instance with a unique index.
    """
    sentence = Sentence(len(self.sentences))
    sentence.add_tokens(tokens)
    self.sentences.append(sentence)
    return sentence

  def get_sentence(self, idx, tokens):
    """Returns or Creates a sentence mapped by idx.

    Args:
      idx: Index of the sentence

    Returns:
      A the Sentence mapped to by idx.
    """
    if idx in self.sentence_map:
      return self.sentence_map[idx]
    sentence = self.new_sentence(tokens)
    self.sentence_map[idx] = sentence
    return sentence

  def to_dict(self):
    """Returns a simplified dictionary representing the NBest data structure.

    Returns:
      A dictionary that can easily be serialized to JSON.
    """
    return {
        "sentence": [s.to_dict() for s in self.sentences]
    }
